class Solution {
public:
    pair<int,int> help(vector<vector<int>> &graph,int n, vector<bool>& hasApple,int vertex,int par){         //help function
        pair<int,int> p={0,hasApple[vertex]};                         //creating a pair for each vertex that store the distance and a bool whether it has apple or not
        for(auto i:graph[vertex]){
            if(i!=par){
            pair<int,int>a=help(graph,n,hasApple,i,vertex);           //recursive call
            p.first+=(2+a.first)*(a.second);                          //updating the pair of vertex with the pair output for recursion
            p.second|=a.second;
            }            
        }
        
        return p;
    }

    int minTime(int n, vector<vector<int>>& edges, vector<bool>& hasApple) {
       vector<vector<int>> graph(n);
       for(int i=0;i<(int)edges.size();i++){      // creating the adjacency list 
           int s=edges[i][0];
           int f=edges[i][1];
           graph[f].push_back(s);
           graph[s].push_back(f);
       } 
       return help(graph,n,hasApple,0,0).first;    //calling the help function

    }
};
